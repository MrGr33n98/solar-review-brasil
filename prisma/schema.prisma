datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

<<<<<<< HEAD
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
=======
enum PlanType {
  free
  premium
  enterprise
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  contactRequests ContactRequest[]
}

model Company {
  id                String   @id @default(cuid())
  name              String
  slug              String   @unique
  description       String
  logo              String
  banner            String
  rating            Float
  reviewCount       Int
  planType          PlanType
  city              String
  state             String
  specialties       String[]
  established       Int
  website           String?
  phone             String?
  verificationBadges String[]
  reviews           Review[]
  contactRequests   ContactRequest[]
}

model Review {
  id        String   @id @default(cuid())
  companyId String
  userName  String
  rating    Int
  comment   String
  verified  Boolean
  createdAt DateTime
  location  String

  company   Company @relation(fields: [companyId], references: [id])
}

model ContactRequest {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  message   String
  status    String   @default("pending")
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?  @db.Text
  oauth_token        String?  @db.Text
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
>>>>>>> main

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
<<<<<<< HEAD
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
=======

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
>>>>>>> main
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

